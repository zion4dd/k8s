# Google Cloud SDK | Amazon EKS
# AWS, GCP, Azure

# Управление VM c K8s Cluster
minikube version
minikube start			# создать и запустить
minikube start --cpus=4 --memory=8gb --disk-size=5gb -p MYCLUSTERNAME
minikube stop
minikube delete
minikube ssh			# Логин
minikube dashboard
minikube service hello [--url]

# инфа кластера
kubectl version			# Версия kubectl клиента и сервера
kubectl cluster-info		# Информация о K8s Cluster'e
kubectl get nodes -o wide	# Все Серверы K8s Cluster'a
kubectl get componentstatuses	# Состояние K8s Cluster'a

# запустить и удалить
kubectl create deployment hello --image=registry.k8s.io/echoserver:1.10
kubectl delete deployment hello [--all]
OR
kubectl apply -f redis.yaml
kubectl delete -f redis.yaml

# инфа сущностей
kubectl get pods -o wide
kubectl get deploy | deployments
kubectl describe pods hello
kubectl describe deployment hello

kubectl port-forward <pod-name> 8888:80
kubectl exec -it <pod-name> -- bash

# масштабирование
kubectl scale deployment hello --replicas 3
kubectl get rs			# replicas set - реплики объединяются в сет
kubectl autoscale deployment hello --min=4 --max=6 --cpu-percent=80
kubectl get hpa			# horizontal pod autoscaler - создается объект hpa

# накатить новый image в deployment
kubectl set image deployment/hello myhttpd=registry.k8s.io/echoserver:1.10 --record # myhttpd имя контейнера
kubectl apply -f redis.yaml			# обновить image в манифесте
kubectl rollout restart deployment/hello	# обновить image с тем же именем imagePullPolicy: Always !!!

# откат
kubectl rollout history deployment/hello		# история обновлений
kubectl rollout status deployment/hello			# статус обновлений
kubectl rollout undo deployment/hello			# откатить на предыдущую версию
kubectl rollout undo deployment/hello --to-revision=4	# номер из history

# обновить образ на хабе
docker build -t zion4d/minizi:latest .
docker push zion4d/minizi:latest

# сервис создать вручную
kubectl expose deployment hello --type=NodePort --port=80
  --type=
    - ClusterIP: # создается всегда по-умолчанию
      kubectl get svc # смотрим CLUSTER-IP
      kubectl ssh node NODE_NAME # заходим в нод
      curl CLUSTER-IP # проверяем доступ изнутри кластера
    - NodePort - additional external port (in the range 30000-32767):
      kubectl describe nodes | grep IP # смотрим ip нодов
      kubectl get svc # смотрим порт PORT(S)
      через браузер заходим ip:port
    - ExternalName # создается через команду kubectl create
    - LoadBalancer # только для облачных AWS, GCP, Azure
      kubectl get svc # смотрим EXTERNAL-IP
      через браузер заходим ip
kubectl get svc | services
kubectl delete svc hello



Visualizing the Structure
[External Client] ---> [Node IP:30012] (e.g., 192.168.1.10:30012)
                        |
                        v
                [Cluster IP:80] (10.96.123.456:80)
                                (internal virtual IP:service port inside the cluster)
                        |
                Load Balances Across:
                        |
        [Pod 1 IP:8000]    [Pod 2 IP:8000]
        (10.244.0.5:8000)  (10.244.0.6:8000)

Node IP: External entry point (via NodePort).
Cluster IP: Internal load balancer (via Service).
Pod IP: Actual app instances.

Key Takeaways
Cluster IP (10.96.123.456): Internal virtual IP for service discovery and load balancing.
Node IP: Physical machine IP, exposes NodePort (30012) externally.
Pod IPs: Unique IPs for each pod, where the app runs.

